#!/usr/bin/env python3
"""
Teste simples do backend para diagn√≥stico
"""

import sys
import os

def test_imports():
    """Testa se todas as depend√™ncias est√£o dispon√≠veis"""
    print("üîç Testando imports...")
    
    try:
        import fastapi
        print("‚úÖ FastAPI OK")
    except ImportError as e:
        print(f"‚ùå FastAPI: {e}")
        return False
    
    try:
        import pyodbc
        print("‚úÖ PyODBC OK")
    except ImportError as e:
        print(f"‚ùå PyODBC: {e}")
        return False
    
    try:
        import uvicorn
        print("‚úÖ Uvicorn OK")
    except ImportError as e:
        print(f"‚ùå Uvicorn: {e}")
        return False
    
    try:
        from pydantic import BaseModel
        print("‚úÖ Pydantic OK")
    except ImportError as e:
        print(f"‚ùå Pydantic: {e}")
        return False
    
    return True

def test_advanced_ai():
    """Testa se o m√≥dulo de IA avan√ßada est√° dispon√≠vel"""
    print("\nüß† Testando Advanced AI...")
    
    try:
        from advanced_financial_bert import AdvancedFinancialBERT
        print("‚úÖ Advanced Financial BERT OK")
        return True
    except ImportError as e:
        print(f"‚ùå Advanced Financial BERT: {e}")
        return False

def test_sql_connection():
    """Testa conex√£o b√°sica com SQL Server"""
    print("\nüóÑÔ∏è Testando conex√£o SQL...")
    
    try:
        import pyodbc
        
        # Dados de conex√£o
        server = "DESKTOP-T9HKFSQ\\SQLEXPRESS"
        database = "Projeto_Dev"
        
        # String de conex√£o
        conn_str = f"DRIVER={{ODBC Driver 17 for SQL Server}};SERVER={server};DATABASE={database};Trusted_Connection=yes;"
        
        # Tentar conectar
        conn = pyodbc.connect(conn_str)
        cursor = conn.cursor()
        
        # Teste simples
        cursor.execute("SELECT @@VERSION")
        version = cursor.fetchone()
        
        cursor.close()
        conn.close()
        
        print("‚úÖ Conex√£o SQL OK")
        print(f"   Vers√£o: {version[0][:50]}...")
        return True
        
    except Exception as e:
        print(f"‚ùå Conex√£o SQL: {e}")
        return False

def main():
    """Fun√ß√£o principal de teste"""
    print("üöÄ DIAGN√ìSTICO DO BACKEND DD-AI")
    print("=" * 50)
    
    # Teste 1: Imports
    if not test_imports():
        print("\n‚ùå FALHA: Imports b√°sicos n√£o funcionaram")
        return False
    
    # Teste 2: Advanced AI
    ai_ok = test_advanced_ai()
    
    # Teste 3: SQL Connection
    sql_ok = test_sql_connection()
    
    print("\nüìä RESUMO DOS TESTES:")
    print(f"   Imports b√°sicos: ‚úÖ")
    print(f"   Advanced AI: {'‚úÖ' if ai_ok else '‚ùå'}")
    print(f"   Conex√£o SQL: {'‚úÖ' if sql_ok else '‚ùå'}")
    
    if ai_ok and sql_ok:
        print("\nüéâ TODOS OS TESTES PASSARAM!")
        print("   O backend deve funcionar corretamente.")
        return True
    else:
        print("\n‚ö†Ô∏è ALGUNS TESTES FALHARAM:")
        if not ai_ok:
            print("   - Advanced AI n√£o dispon√≠vel (funcionalidades limitadas)")
        if not sql_ok:
            print("   - Conex√£o SQL falhou (verificar configura√ß√£o)")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
